/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef lamportservice_H
#define lamportservice_H

#include <thrift/TDispatchProcessor.h>
#include "lamport_types.h"



class lamportserviceIf {
 public:
  virtual ~lamportserviceIf() {}
  virtual void request(TimeStamp& _return, const TimeStamp& timestamp) = 0;
  virtual void release(const TimeStamp& timestamp) = 0;
  virtual void lock() = 0;
  virtual void unlock() = 0;
};

class lamportserviceIfFactory {
 public:
  typedef lamportserviceIf Handler;

  virtual ~lamportserviceIfFactory() {}

  virtual lamportserviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(lamportserviceIf* /* handler */) = 0;
};

class lamportserviceIfSingletonFactory : virtual public lamportserviceIfFactory {
 public:
  lamportserviceIfSingletonFactory(const boost::shared_ptr<lamportserviceIf>& iface) : iface_(iface) {}
  virtual ~lamportserviceIfSingletonFactory() {}

  virtual lamportserviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(lamportserviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<lamportserviceIf> iface_;
};

class lamportserviceNull : virtual public lamportserviceIf {
 public:
  virtual ~lamportserviceNull() {}
  void request(TimeStamp& /* _return */, const TimeStamp& /* timestamp */) {
    return;
  }
  void release(const TimeStamp& /* timestamp */) {
    return;
  }
  void lock() {
    return;
  }
  void unlock() {
    return;
  }
};

typedef struct _lamportservice_request_args__isset {
  _lamportservice_request_args__isset() : timestamp(false) {}
  bool timestamp;
} _lamportservice_request_args__isset;

class lamportservice_request_args {
 public:

  lamportservice_request_args() {
  }

  virtual ~lamportservice_request_args() throw() {}

  TimeStamp timestamp;

  _lamportservice_request_args__isset __isset;

  void __set_timestamp(const TimeStamp& val) {
    timestamp = val;
  }

  bool operator == (const lamportservice_request_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const lamportservice_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const lamportservice_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class lamportservice_request_pargs {
 public:


  virtual ~lamportservice_request_pargs() throw() {}

  const TimeStamp* timestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _lamportservice_request_result__isset {
  _lamportservice_request_result__isset() : success(false) {}
  bool success;
} _lamportservice_request_result__isset;

class lamportservice_request_result {
 public:

  lamportservice_request_result() {
  }

  virtual ~lamportservice_request_result() throw() {}

  TimeStamp success;

  _lamportservice_request_result__isset __isset;

  void __set_success(const TimeStamp& val) {
    success = val;
  }

  bool operator == (const lamportservice_request_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const lamportservice_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const lamportservice_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _lamportservice_request_presult__isset {
  _lamportservice_request_presult__isset() : success(false) {}
  bool success;
} _lamportservice_request_presult__isset;

class lamportservice_request_presult {
 public:


  virtual ~lamportservice_request_presult() throw() {}

  TimeStamp* success;

  _lamportservice_request_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _lamportservice_release_args__isset {
  _lamportservice_release_args__isset() : timestamp(false) {}
  bool timestamp;
} _lamportservice_release_args__isset;

class lamportservice_release_args {
 public:

  lamportservice_release_args() {
  }

  virtual ~lamportservice_release_args() throw() {}

  TimeStamp timestamp;

  _lamportservice_release_args__isset __isset;

  void __set_timestamp(const TimeStamp& val) {
    timestamp = val;
  }

  bool operator == (const lamportservice_release_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const lamportservice_release_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const lamportservice_release_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class lamportservice_release_pargs {
 public:


  virtual ~lamportservice_release_pargs() throw() {}

  const TimeStamp* timestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class lamportservice_release_result {
 public:

  lamportservice_release_result() {
  }

  virtual ~lamportservice_release_result() throw() {}


  bool operator == (const lamportservice_release_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const lamportservice_release_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const lamportservice_release_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class lamportservice_release_presult {
 public:


  virtual ~lamportservice_release_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class lamportservice_lock_args {
 public:

  lamportservice_lock_args() {
  }

  virtual ~lamportservice_lock_args() throw() {}


  bool operator == (const lamportservice_lock_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const lamportservice_lock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const lamportservice_lock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class lamportservice_lock_pargs {
 public:


  virtual ~lamportservice_lock_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class lamportservice_lock_result {
 public:

  lamportservice_lock_result() {
  }

  virtual ~lamportservice_lock_result() throw() {}


  bool operator == (const lamportservice_lock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const lamportservice_lock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const lamportservice_lock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class lamportservice_lock_presult {
 public:


  virtual ~lamportservice_lock_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class lamportservice_unlock_args {
 public:

  lamportservice_unlock_args() {
  }

  virtual ~lamportservice_unlock_args() throw() {}


  bool operator == (const lamportservice_unlock_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const lamportservice_unlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const lamportservice_unlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class lamportservice_unlock_pargs {
 public:


  virtual ~lamportservice_unlock_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class lamportservice_unlock_result {
 public:

  lamportservice_unlock_result() {
  }

  virtual ~lamportservice_unlock_result() throw() {}


  bool operator == (const lamportservice_unlock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const lamportservice_unlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const lamportservice_unlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class lamportservice_unlock_presult {
 public:


  virtual ~lamportservice_unlock_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class lamportserviceClient : virtual public lamportserviceIf {
 public:
  lamportserviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  lamportserviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void request(TimeStamp& _return, const TimeStamp& timestamp);
  void send_request(const TimeStamp& timestamp);
  void recv_request(TimeStamp& _return);
  void release(const TimeStamp& timestamp);
  void send_release(const TimeStamp& timestamp);
  void recv_release();
  void lock();
  void send_lock();
  void recv_lock();
  void unlock();
  void send_unlock();
  void recv_unlock();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class lamportserviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<lamportserviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (lamportserviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_release(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  lamportserviceProcessor(boost::shared_ptr<lamportserviceIf> iface) :
    iface_(iface) {
    processMap_["request"] = &lamportserviceProcessor::process_request;
    processMap_["release"] = &lamportserviceProcessor::process_release;
    processMap_["lock"] = &lamportserviceProcessor::process_lock;
    processMap_["unlock"] = &lamportserviceProcessor::process_unlock;
  }

  virtual ~lamportserviceProcessor() {}
};

class lamportserviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  lamportserviceProcessorFactory(const ::boost::shared_ptr< lamportserviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< lamportserviceIfFactory > handlerFactory_;
};

class lamportserviceMultiface : virtual public lamportserviceIf {
 public:
  lamportserviceMultiface(std::vector<boost::shared_ptr<lamportserviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~lamportserviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<lamportserviceIf> > ifaces_;
  lamportserviceMultiface() {}
  void add(boost::shared_ptr<lamportserviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void request(TimeStamp& _return, const TimeStamp& timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request(_return, timestamp);
    }
    ifaces_[i]->request(_return, timestamp);
    return;
  }

  void release(const TimeStamp& timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->release(timestamp);
    }
    ifaces_[i]->release(timestamp);
  }

  void lock() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lock();
    }
    ifaces_[i]->lock();
  }

  void unlock() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlock();
    }
    ifaces_[i]->unlock();
  }

};



#endif
